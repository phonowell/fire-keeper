import mArgv from './argv';
import mBackup from './backup_';
import mClean from './clean_';
import mCompile from './compile_';
import mCopy from './copy_';
import mDownload from './download_';
import mFormatArgument from './formatArgument';
import mGetBasename from './getBasename';
import mGetDirname from './getDirname';
import mGetExtname from './getExtname';
import mGetFilename from './getFilename';
import mGetName from './getName';
import mHome from './home';
import mI from './i';
import mIsExisted from './isExisted_';
import mIsSame from './isSame_';
import mLink from './link_';
import mMkdir from './mkdir_';
import mMove from './move_';
import mNormalizePath from './normalizePath';
import mNormalizePathToArray from './normalizePathToArray';
import mOs from './os';
import mParseJson from './parseJson';
import mParseString from './parseString';
import mPrompt from './prompt_';
import mRead from './read_';
import mRecover from './recover_';
import mRemove from './remove_';
import mRename from './rename_';
import mRequire from './require';
import mRoot from './root';
import mSay from './say_';
import mSleep from './sleep_';
import mSource from './source_';
import mStat from './stat_';
import mType from './type';
import mWatch from './watch';
import mWrapList from './wrapList';
import mWrite from './write_';
import mZip from './zip_';
declare const _default: {
    argv: typeof mArgv;
    backup_: typeof mBackup;
    clean_: typeof mClean;
    compile_: typeof mCompile;
    copy_: typeof mCopy;
    download_: typeof mDownload;
    exec_: (cmd: string | string[], option?: {
        ignoreError?: boolean | undefined;
        silent?: boolean | undefined;
    }) => Promise<[boolean, string]>;
    formatArgument: typeof mFormatArgument;
    getBasename: typeof mGetBasename;
    getDirname: typeof mGetDirname;
    getExtname: typeof mGetExtname;
    getFilename: typeof mGetFilename;
    getName: typeof mGetName;
    home: typeof mHome;
    i: typeof mI;
    info: {
        (): import("./info").M;
        <T>(input: T): T;
        <T_1>(type: string, input: T_1): T_1;
    };
    isExisted_: typeof mIsExisted;
    isSame_: typeof mIsSame;
    link_: typeof mLink;
    mkdir_: typeof mMkdir;
    move_: typeof mMove;
    normalizePath: typeof mNormalizePath;
    normalizePathToArray: typeof mNormalizePathToArray;
    os: typeof mOs;
    parseJson: typeof mParseJson;
    parseString: typeof mParseString;
    prompt_: typeof mPrompt;
    read_: typeof mRead;
    recover_: typeof mRecover;
    remove_: typeof mRemove;
    rename_: typeof mRename;
    require: typeof mRequire;
    root: typeof mRoot;
    say_: typeof mSay;
    sleep_: typeof mSleep;
    source_: typeof mSource;
    stat_: typeof mStat;
    type: typeof mType;
    watch: typeof mWatch;
    wrapList: typeof mWrapList;
    write_: typeof mWrite;
    zip_: typeof mZip;
};
export default _default;
